// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: network.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Meshmate_NetworkStatusRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Meshmate_NetworkStatusResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isOnline: Bool = false

  var latency: Int32 = 0

  var downloadSpeedMbps: Double = 0

  var uploadSpeedMbps: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "meshmate"

extension Meshmate_NetworkStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NetworkStatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Meshmate_NetworkStatusRequest, rhs: Meshmate_NetworkStatusRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Meshmate_NetworkStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NetworkStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isOnline"),
    2: .same(proto: "latency"),
    3: .same(proto: "downloadSpeedMbps"),
    4: .same(proto: "uploadSpeedMbps"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isOnline) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.latency) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.downloadSpeedMbps) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.uploadSpeedMbps) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isOnline != false {
      try visitor.visitSingularBoolField(value: self.isOnline, fieldNumber: 1)
    }
    if self.latency != 0 {
      try visitor.visitSingularInt32Field(value: self.latency, fieldNumber: 2)
    }
    if self.downloadSpeedMbps.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.downloadSpeedMbps, fieldNumber: 3)
    }
    if self.uploadSpeedMbps.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.uploadSpeedMbps, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Meshmate_NetworkStatusResponse, rhs: Meshmate_NetworkStatusResponse) -> Bool {
    if lhs.isOnline != rhs.isOnline {return false}
    if lhs.latency != rhs.latency {return false}
    if lhs.downloadSpeedMbps != rhs.downloadSpeedMbps {return false}
    if lhs.uploadSpeedMbps != rhs.uploadSpeedMbps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
