//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: network.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Meshmate_NetworkServiceClient`, then call methods of this protocol to make API calls.
internal protocol Meshmate_NetworkServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol? { get }

  func getNetworkStatus(
    _ request: Meshmate_NetworkStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Meshmate_NetworkStatusRequest, Meshmate_NetworkStatusResponse>

  func getConnectedDevices(
    _ request: Meshmate_ConnectedDevicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Meshmate_ConnectedDevicesRequest, Meshmate_ConnectedDevicesResponse>
}

extension Meshmate_NetworkServiceClientProtocol {
  internal var serviceName: String {
    return "meshmate.NetworkService"
  }

  /// Unary call to GetNetworkStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNetworkStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNetworkStatus(
    _ request: Meshmate_NetworkStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Meshmate_NetworkStatusRequest, Meshmate_NetworkStatusResponse> {
    return self.makeUnaryCall(
      path: Meshmate_NetworkServiceClientMetadata.Methods.getNetworkStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNetworkStatusInterceptors() ?? []
    )
  }

  /// Unary call to GetConnectedDevices
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConnectedDevices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getConnectedDevices(
    _ request: Meshmate_ConnectedDevicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Meshmate_ConnectedDevicesRequest, Meshmate_ConnectedDevicesResponse> {
    return self.makeUnaryCall(
      path: Meshmate_NetworkServiceClientMetadata.Methods.getConnectedDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConnectedDevicesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Meshmate_NetworkServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Meshmate_NetworkServiceNIOClient")
internal final class Meshmate_NetworkServiceClient: Meshmate_NetworkServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the meshmate.NetworkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Meshmate_NetworkServiceNIOClient: Meshmate_NetworkServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the meshmate.NetworkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Meshmate_NetworkServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol? { get }

  func makeGetNetworkStatusCall(
    _ request: Meshmate_NetworkStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Meshmate_NetworkStatusRequest, Meshmate_NetworkStatusResponse>

  func makeGetConnectedDevicesCall(
    _ request: Meshmate_ConnectedDevicesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Meshmate_ConnectedDevicesRequest, Meshmate_ConnectedDevicesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Meshmate_NetworkServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Meshmate_NetworkServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetNetworkStatusCall(
    _ request: Meshmate_NetworkStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Meshmate_NetworkStatusRequest, Meshmate_NetworkStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Meshmate_NetworkServiceClientMetadata.Methods.getNetworkStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNetworkStatusInterceptors() ?? []
    )
  }

  internal func makeGetConnectedDevicesCall(
    _ request: Meshmate_ConnectedDevicesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Meshmate_ConnectedDevicesRequest, Meshmate_ConnectedDevicesResponse> {
    return self.makeAsyncUnaryCall(
      path: Meshmate_NetworkServiceClientMetadata.Methods.getConnectedDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConnectedDevicesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Meshmate_NetworkServiceAsyncClientProtocol {
  internal func getNetworkStatus(
    _ request: Meshmate_NetworkStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Meshmate_NetworkStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Meshmate_NetworkServiceClientMetadata.Methods.getNetworkStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNetworkStatusInterceptors() ?? []
    )
  }

  internal func getConnectedDevices(
    _ request: Meshmate_ConnectedDevicesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Meshmate_ConnectedDevicesResponse {
    return try await self.performAsyncUnaryCall(
      path: Meshmate_NetworkServiceClientMetadata.Methods.getConnectedDevices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConnectedDevicesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Meshmate_NetworkServiceAsyncClient: Meshmate_NetworkServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Meshmate_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Meshmate_NetworkServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getNetworkStatus'.
  func makeGetNetworkStatusInterceptors() -> [ClientInterceptor<Meshmate_NetworkStatusRequest, Meshmate_NetworkStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'getConnectedDevices'.
  func makeGetConnectedDevicesInterceptors() -> [ClientInterceptor<Meshmate_ConnectedDevicesRequest, Meshmate_ConnectedDevicesResponse>]
}

internal enum Meshmate_NetworkServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NetworkService",
    fullName: "meshmate.NetworkService",
    methods: [
      Meshmate_NetworkServiceClientMetadata.Methods.getNetworkStatus,
      Meshmate_NetworkServiceClientMetadata.Methods.getConnectedDevices,
    ]
  )

  internal enum Methods {
    internal static let getNetworkStatus = GRPCMethodDescriptor(
      name: "GetNetworkStatus",
      path: "/meshmate.NetworkService/GetNetworkStatus",
      type: GRPCCallType.unary
    )

    internal static let getConnectedDevices = GRPCMethodDescriptor(
      name: "GetConnectedDevices",
      path: "/meshmate.NetworkService/GetConnectedDevices",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Meshmate_NetworkServiceProvider: CallHandlerProvider {
  var interceptors: Meshmate_NetworkServiceServerInterceptorFactoryProtocol? { get }

  func getNetworkStatus(request: Meshmate_NetworkStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Meshmate_NetworkStatusResponse>

  func getConnectedDevices(request: Meshmate_ConnectedDevicesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Meshmate_ConnectedDevicesResponse>
}

extension Meshmate_NetworkServiceProvider {
  internal var serviceName: Substring {
    return Meshmate_NetworkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetNetworkStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meshmate_NetworkStatusRequest>(),
        responseSerializer: ProtobufSerializer<Meshmate_NetworkStatusResponse>(),
        interceptors: self.interceptors?.makeGetNetworkStatusInterceptors() ?? [],
        userFunction: self.getNetworkStatus(request:context:)
      )

    case "GetConnectedDevices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meshmate_ConnectedDevicesRequest>(),
        responseSerializer: ProtobufSerializer<Meshmate_ConnectedDevicesResponse>(),
        interceptors: self.interceptors?.makeGetConnectedDevicesInterceptors() ?? [],
        userFunction: self.getConnectedDevices(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Meshmate_NetworkServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Meshmate_NetworkServiceServerInterceptorFactoryProtocol? { get }

  func getNetworkStatus(
    request: Meshmate_NetworkStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Meshmate_NetworkStatusResponse

  func getConnectedDevices(
    request: Meshmate_ConnectedDevicesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Meshmate_ConnectedDevicesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Meshmate_NetworkServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Meshmate_NetworkServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Meshmate_NetworkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Meshmate_NetworkServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetNetworkStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meshmate_NetworkStatusRequest>(),
        responseSerializer: ProtobufSerializer<Meshmate_NetworkStatusResponse>(),
        interceptors: self.interceptors?.makeGetNetworkStatusInterceptors() ?? [],
        wrapping: { try await self.getNetworkStatus(request: $0, context: $1) }
      )

    case "GetConnectedDevices":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meshmate_ConnectedDevicesRequest>(),
        responseSerializer: ProtobufSerializer<Meshmate_ConnectedDevicesResponse>(),
        interceptors: self.interceptors?.makeGetConnectedDevicesInterceptors() ?? [],
        wrapping: { try await self.getConnectedDevices(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Meshmate_NetworkServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getNetworkStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNetworkStatusInterceptors() -> [ServerInterceptor<Meshmate_NetworkStatusRequest, Meshmate_NetworkStatusResponse>]

  /// - Returns: Interceptors to use when handling 'getConnectedDevices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetConnectedDevicesInterceptors() -> [ServerInterceptor<Meshmate_ConnectedDevicesRequest, Meshmate_ConnectedDevicesResponse>]
}

internal enum Meshmate_NetworkServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NetworkService",
    fullName: "meshmate.NetworkService",
    methods: [
      Meshmate_NetworkServiceServerMetadata.Methods.getNetworkStatus,
      Meshmate_NetworkServiceServerMetadata.Methods.getConnectedDevices,
    ]
  )

  internal enum Methods {
    internal static let getNetworkStatus = GRPCMethodDescriptor(
      name: "GetNetworkStatus",
      path: "/meshmate.NetworkService/GetNetworkStatus",
      type: GRPCCallType.unary
    )

    internal static let getConnectedDevices = GRPCMethodDescriptor(
      name: "GetConnectedDevices",
      path: "/meshmate.NetworkService/GetConnectedDevices",
      type: GRPCCallType.unary
    )
  }
}
